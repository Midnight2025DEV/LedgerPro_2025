    private var filteredTransactions: [Transaction] {
        // SUPER NUCLEAR OPTION: Bypass ALL filtering temporarily
        AppLogger.shared.info("ðŸš¨ SUPER NUCLEAR: Returning ALL \(dataManager.transactions.count) transactions")
        return dataManager.transactions
    }
    
    // Async filtering function that runs on background thread
    private func filterTransactions() async {
        // Cancel any existing filter operation
        filterTask?.cancel()
        
        // Create new filter criteria
        let currentCriteria = FilterCriteria(
            searchText: searchText,
            selectedCategory: selectedCategory,
            selectedCategoryObject: selectedCategoryObject,
            showUncategorizedOnly: showUncategorizedOnly,
            sortOrder: sortOrder
        )
        
        // Skip if criteria hasn't changed
        guard currentCriteria != lastFilterCriteria else { return }
        
        await MainActor.run {
            isFiltering = true
        }
        
        // Create new task
--
                await filterTransactions()
            }
        }
    }
    
    // MARK: - View Components
    
    private var headerSection: some View {
        VStack(spacing: 12) {
            HStack {
                TextField("Search transactions...", text: $searchText)
                    .textFieldStyle(.roundedBorder)
                    .onChange(of: searchText) { _, newValue in
                        handleSearchChange(newValue)
                    }
                
                Button(action: {
                    autoCategorizeUncategorized()
                }) {
                    Label("Auto-Categorize", systemImage: "wand.and.stars")
                }
--
                    await filterTransactions()
                }
            }
            .buttonStyle(.borderedProminent)
            
            Button("Clear Filters") {
                searchText = ""
                selectedCategory = "All"
                selectedCategoryObject = nil
                sortOrder = .dateDescending
            }
            .buttonStyle(.bordered)
        }
        .padding(.top, 8)
    }
    
    private var bulkActionsToolbar: some View {
        VStack(spacing: 0) {
            HStack(spacing: 16) {
                Text("\(selectedTransactions.count) selected")
                    .font(.headline)
--
            if !filteredTransactions.isEmpty {
                AutoCategorizationStatsBanner(
                    autoCategorizedCount: autoCategorizedCount,
                    totalCount: filteredTransactions.count
                )
                .padding(.horizontal)
                .padding(.vertical, 8)
            }
            
            // Transaction List
            if filteredTransactions.isEmpty {
                emptyStateView
            } else {
                transactionListView
            }
        }
    }
    
    private var emptyStateView: some View {
        VStack(spacing: 16) {
            Image(systemName: "magnifyingglass")
                .font(.system(size: 48))
                .foregroundColor(.secondary)
            
            Text("No transactions found")
                .font(.headline)
                .foregroundColor(.secondary)
            
            if dataManager.transactions.count > 0 {
                Text("\(dataManager.transactions.count) transactions are hidden by current filters")
                    .font(.subheadline)
--
                        await filterTransactions()
                    }
                }
                .buttonStyle(.borderedProminent)
                .controlSize(.large)
            }
            
            if !searchText.isEmpty || selectedCategory != "All" || selectedCategoryObject != nil {
                Button("Clear Filters") {
                    searchText = ""
                    selectedCategory = "All"
                    selectedCategoryObject = nil
                }
                .buttonStyle(.borderedProminent)
            }
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
    }
    
    private var transactionListView: some View {
        ScrollView {
--
            .navigationTitle("Transactions (\(filteredTransactions.count) of \(dataManager.transactions.count))")
            .onAppear {
                Task {
                    // Log initial state
                    AppLogger.shared.info("ðŸ“± TransactionListView appeared with \(dataManager.transactions.count) transactions")
                    
                    // DEBUG: Log sample transactions to understand the data
                    if dataManager.transactions.count > 0 {
                        AppLogger.shared.info("ðŸ“Š First 5 transactions:")
                        for (index, transaction) in dataManager.transactions.prefix(5).enumerated() {
                            AppLogger.shared.info("   \(index + 1). '\(transaction.description)' - \(transaction.formattedDate) - Category: '\(transaction.category)' - Amount: \(transaction.amount)")
                        }
                        
                        // Check date distribution
                        let dateFormatter = DateFormatter()
                        dateFormatter.dateFormat = "yyyy-MM-dd"
                        let dates = Set(dataManager.transactions.map { dateFormatter.string(from: $0.formattedDate) })
                        AppLogger.shared.info("ðŸ“… Transactions span \(dates.count) unique dates: \(Array(dates.sorted()).joined(separator: ", "))")
                    }
                    
                    // NUCLEAR OPTION: Always reset filters to ensure transactions are visible
--
                    await filterTransactions()
                }
                
                // Listen for import completion
                NotificationCenter.default.addObserver(
                    forName: NSNotification.Name("TransactionsImported"),
                    object: nil,
                    queue: .main
                ) { notification in
                    // Reset all filters to show imported transactions
                    self.searchText = ""
                    self.selectedCategory = "All"
                    self.selectedCategoryObject = nil
                    self.showUncategorizedOnly = false
                    self.sortOrder = .dateDescending
                    
                    // Force refresh
                    Task { @MainActor in
                        self.lastFilterCriteria = FilterCriteria()
                        await self.filterTransactions()
                    }
                    
                    AppLogger.shared.info("ðŸ“¥ Import complete - reset filters to show all transactions")
                }
            }
            .onChange(of: dataManager.transactions) { _, _ in
                Task {
                    await filterTransactions()
                }
            }
            .onChange(of: dataManager.lastImportTime) { _, newImportTime in
                // Reset filters when new transactions are imported
                if newImportTime != nil {
                    AppLogger.shared.info("ðŸ“¥ New import detected - resetting filters to show all transactions")
                    searchText = ""
                    selectedCategory = "All"
                    selectedCategoryObject = nil
                    showUncategorizedOnly = false
                    sortOrder = .dateDescending
                    
                    Task { @MainActor in
                        lastFilterCriteria = FilterCriteria()
                        await filterTransactions()
                    }
                }
            }
            .onChange(of: selectedCategory) { _, _ in
                Task {
                    await filterTransactions()
                }
            }
            .onChange(of: selectedCategoryObject) { _, _ in
                Task {
                    await filterTransactions()
                }
            }
            .onChange(of: showUncategorizedOnly) { _, _ in
                Task {
                    await filterTransactions()
                }
            }
            .onChange(of: sortOrder) { _, _ in
                Task {
                    await filterTransactions()
                }
            }
            .onChange(of: triggerUncategorizedFilter) { _, _ in
                // When triggered from ContentView, activate uncategorized filter
                showUncategorizedOnly = true
                selectedCategory = "All"
                selectedCategoryObject = nil
                searchText = ""
                Task {
                    await filterTransactions()
                }
            }
            .onAppear {
                // Set initial filter state based on parameters
                if initialShowUncategorizedOnly {
                    showUncategorizedOnly = true
                    selectedCategory = "All"
                    selectedCategoryObject = nil
                }
            }
    }
    
    private var mainContent: some View {
        VStack(spacing: 0) {
            headerSection
            
            Divider()
            
            if !selectedTransactions.isEmpty {
                bulkActionsToolbar
--
                            await filterTransactions()
                        }
                    }) {
                        Image(systemName: "arrow.clockwise")
                    }
                    .help("Refresh Transactions")
                    
                    // DEBUG: Force Show All Button
                    Button(action: {
                        AppLogger.shared.info("ðŸš¨ DEBUG: Force showing all transactions without filters")
                        cachedFilteredTransactions = dataManager.transactions
                        
                        // Group by date without any filtering
                        let dateFormatter = DateFormatter()
                        dateFormatter.dateFormat = "yyyy-MM-dd"
                        cachedGroupedTransactions = Dictionary(grouping: dataManager.transactions) { transaction in
                            dateFormatter.string(from: transaction.formattedDate)
                        }
                        
                        AppLogger.shared.info("ðŸš¨ DEBUG: Forced display of \(cachedFilteredTransactions.count) transactions")
                    }) {
--
                            if let firstTransaction = filteredTransactions.first {
                                selectedTransactions.insert(firstTransaction.id)
                            }
                        } else {
                            // Exit bulk selection
                            selectedTransactions.removeAll()
                        }
                    }) {
                        Image(systemName: selectedTransactions.isEmpty ? "checkmark.square" : "xmark.square")
                    }
                    .help(selectedTransactions.isEmpty ? "Bulk Select" : "Exit Bulk Select")
                    
                    Button(action: { dataManager.clearAllData() }) {
                        Image(systemName: "trash")
                    }
                    .help("Clear All Data")
                    
                    Button(action: { dataManager.removeDuplicates() }) {
                        Image(systemName: "arrow.triangle.2.circlepath")
                    }
                    .help("Remove Duplicates")
